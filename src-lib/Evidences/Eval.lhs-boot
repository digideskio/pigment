> {-# LANGUAGE TypeOperators, GADTs, KindSignatures,
>     TypeSynonymInstances, FlexibleInstances, FlexibleContexts, PatternGuards,
>     DataKinds #-}

> module Evidences.Eval where

> import Data.Foldable
> import Evidences.Tm

> ($$) :: VAL -> Elim VAL -> VAL
> ($$$) :: (Foldable f) => VAL -> f (Elim VAL) -> VAL
> (@@) :: Op -> [VAL] -> VAL
> eval :: Tm d REF -> ENV -> VAL
